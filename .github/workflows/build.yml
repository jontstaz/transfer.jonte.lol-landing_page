name: Build React Static Files

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
    
    - name: Run tests
      run: |
        if npm run | grep -q "test"; then
          echo "Running tests..."
          npm test -- --coverage --watchAll=false
        else
          echo "No test script found, skipping tests..."
        fi
      continue-on-error: true
    
    - name: Build static files
      run: |
        if npm run | grep -q "build"; then
          echo "Running Next.js build..."
          
          # Check if we need to add output: 'export' to next.config.mjs
          if [ -f "next.config.mjs" ]; then
            echo "Found next.config.mjs, checking for static export config..."
            if ! grep -q "output.*export" next.config.mjs; then
              echo "Adding output: 'export' to next.config.mjs for static export..."
              cp next.config.mjs next.config.mjs.backup
              sed -i "s/const nextConfig = {/const nextConfig = {\n  output: 'export',/" next.config.mjs
              echo "Updated next.config.mjs:"
              cat next.config.mjs
            fi
          elif [ -f "next.config.js" ]; then
            echo "Found next.config.js, checking for static export config..."
            if ! grep -q "output.*export" next.config.js; then
              echo "Adding output: 'export' to next.config.js for static export..."
              cp next.config.js next.config.js.backup
              sed -i "s/const nextConfig = {/const nextConfig = {\n  output: 'export',/" next.config.js
              echo "Updated next.config.js:"
              cat next.config.js
            fi
          else
            echo "No Next.js config found, creating next.config.js with static export..."
            cat > next.config.js << 'EOF'
        /** @type {import('next').NextConfig} */
        const nextConfig = {
          output: 'export',
          images: {
            unoptimized: true,
          },
        }
        
        module.exports = nextConfig
        EOF
          fi
          
          npm run build
        else
          echo "No build script found in package.json"
          echo "Available scripts:"
          npm run
          exit 1
        fi
    
    - name: Check build output
      run: |
        echo "Checking for build output directories..."
        if [ -d "out" ]; then
          echo "Found out/ directory (Next.js static export)"
          ls -la out/
          echo "BUILD_DIR=out" >> $GITHUB_ENV
        elif [ -d ".next" ]; then
          echo "Found .next/ directory (Next.js build output)"
          ls -la .next/
          echo "BUILD_DIR=.next" >> $GITHUB_ENV
        elif [ -d "build" ]; then
          echo "Found build/ directory"
          ls -la build/
          echo "BUILD_DIR=build" >> $GITHUB_ENV
        elif [ -d "dist" ]; then
          echo "Found dist/ directory"
          ls -la dist/
          echo "BUILD_DIR=dist" >> $GITHUB_ENV
        else
          echo "No build output directory found. Checking current directory:"
          ls -la
          echo "BUILD_DIR=." >> $GITHUB_ENV
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files-node-${{ matrix.node-version }}
        path: ${{ env.BUILD_DIR }}/
        retention-days: 30
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: success() && hashFiles('coverage/**/*') != ''
      with:
        name: coverage-reports-node-${{ matrix.node-version }}
        path: coverage/
        retention-days: 7

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files-node-20.x
        path: build-output/
    
    - name: Create ZIP archive
      run: |
        cd build-output
        zip -r ../static-build-${{ github.sha }}.zip .
        cd ..
    
    - name: Generate release tag
      id: tag
      run: |
        timestamp=$(date +%Y%m%d-%H%M%S)
        echo "tag=build-${timestamp}" >> $GITHUB_OUTPUT
        echo "name=Static Build ${timestamp}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: ${{ steps.tag.outputs.name }}
        body: |
          ðŸš€ **Automated Static Build**
          
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Build Date:** ${{ github.run_number }}
          
          This release contains the static web files built from the latest commit.
          
          **Download:** Click on `static-build-${{ github.sha }}.zip` below to download the static files.
          
          ---
          *Generated automatically by GitHub Actions*
        draft: false
        prerelease: false
        files: |
          static-build-${{ github.sha }}.zip
    
    # Optional: Also keep the GitHub Pages deployment
    - name: Deploy to GitHub Pages (Optional)
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build-output
        # cname: your-domain.com  # Optional: replace with your custom domain
    
    # Alternative deployment options (uncomment as needed):
    
    # Deploy to AWS S3
    # - name: Deploy to S3
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-1
    # 
    # - name: Sync to S3
    #   run: aws s3 sync build/ s3://your-bucket-name --delete
    
    # Deploy to Netlify
    # - name: Deploy to Netlify
    #   uses: nwtgck/actions-netlify@v3
    #   with:
    #     publish-dir: './build'
    #     production-branch: main
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     deploy-message: "Deploy from GitHub Actions"
    #   env:
    #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Optional: Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Run dependency check
      run: |
        echo "Checking for known security vulnerabilities..."
        npm audit --audit-level=high --json > audit-results.json || true
        if [ -s audit-results.json ]; then
          echo "Security issues found, check audit-results.json"
        else
          echo "No high-severity security issues found"
        fi
      continue-on-error: true
